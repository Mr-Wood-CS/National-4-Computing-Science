{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to National 4 Computing Science","text":""},{"location":"01-SDD/1.1-Flowcharts/","title":"Flowcharts","text":"<p>Flowcharts are used to show the sequence of steps in a program. We read the flowchart from top-to-bottom, following the arrows.</p> <p>You can use a flowchart with any program, but they are good for clearly showing decisions and loops.</p> <p>Flowcharts don\u2019t have a specific symbol for loops. Instead, they have to show a loop as a decision, with the arrows going up/backwards.</p> <p>In this example, if the password is not correct, the program shows an error message, and then the arrow points back towards asking for the password again. </p> <p>This loop will continue until the user enters a correct password, breaking the loop.</p> <p>Info</p> <p>Some people prefer flowcharts to other notations, and others don\u2019t. </p> <p>According to the course spec, you should never be in a position where you have to draw a flowchart from scratch: you usually have a choice of at least two design notations (e.g. a flowchart or a structure diagram). </p> <p>However, you do need to be able to read and understand a flowchart, and answer questions on one that you are given.</p>"},{"location":"01-SDD/1.2-Input-and-Output/","title":"Input and Output","text":""},{"location":"01-SDD/1.2-Input-and-Output/#python-comments","title":"Python Comments","text":"<p>All of the programs you see will have lines that start with #</p> <p>Example</p> <pre><code># This is a comment\n# The computer ignores lines that start with this symbol\n</code></pre> <p>The computer ignores lines that start with a #. </p> <p>We call these Internal Comments.  </p> <p>It is good practice to write these comments in your code, to remind you what particular parts do.</p> <p>Info</p> <p>At National 5, you will be expected to use comments in your code.</p>"},{"location":"01-SDD/1.2-Input-and-Output/#print-statement","title":"Print Statement","text":"<p>During most National 5 programs, you will be asked to display things on the screen. In Python, you do this with the print() statement.</p> <p>Example</p> <pre><code>print (\"Hello world\")\nprint (\"Welcome to\", \"National 5\")\nprint (\"My name is\", name)\n</code></pre> <p>In the brackets, put the message you want to print. </p> <p>If you want to display a variable, do not use quotation marks:</p> <p>Example</p> <pre><code>print(age)\nprint(name)\n</code></pre> <p>Note</p> <p>This would print whatever is in the variable, not the word age or name.</p> <p>If you want to print a string and a variable, use a comma between the strings:</p> <p>Example</p> <pre><code>print(\"Welcome to\", \"National 5\")\nprint(\"My name is\", name)\n</code></pre>"},{"location":"01-SDD/1.2-Input-and-Output/#input-statement","title":"Input Statement","text":"<p>When you want the user to enter data, use an input statement.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n</code></pre> <p>This shows a message on the screen 'Please enter your name' and asks the user to type in some data. The data they enter is stored in a variable.</p> <p>Example</p> <pre><code># Enter some data from the keyboard\nname = input(\"Please enter your name\")\n\ntitle = input(\"Enter book title\")\nauthor = input(\"Enter book author\")\ngenre = input(\"Enter book genre\")\n</code></pre> <p>Info</p> <p>The input statement will be used in almost all of your programs.</p>"},{"location":"01-SDD/1.2-Input-and-Output/#input-with-numbers","title":"Input with Numbers","text":"<p>When you input numbers, there is an extra step you must take.</p> <p>Any data that you input is automatically assumed to be a string.</p> <p>Strings can contain any sort of characters, including digits.</p> <p>Note</p> <p>It's important, if we want to use the data as a number (for example, doing a calculation with it) that we cast (convert) it from string to a number type.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n\n# When you input an integer number, use int( )\nage = int(input(\"Enter age\"))\n\n# When you input a real number, use float( )\nprice = float(input(\"Enter price\"))\n</code></pre>"},{"location":"01-SDD/1.3-Variables-and-Data-Types/","title":"Variables and Data Types","text":""},{"location":"01-SDD/1.3-Variables-and-Data-Types/#what-are-variables","title":"What are Variables?","text":"<p>A variable is something that can be assigned a value.</p> <p>Example</p> <pre><code>x = 5\ny = 2\n</code></pre> <p>You will already have used similar in Maths. What is x + y? (the answer is 7)</p> <p>In computing however, we usually give them a longer (more meaningful) name, such as:</p> <p>Example</p> <pre><code>age = 15\nname = \"Bob\"\nemail = \"bob@gmail.com\"\n</code></pre>"},{"location":"01-SDD/1.3-Variables-and-Data-Types/#python-variable-naming-rules","title":"Python Variable Naming Rules","text":"<ul> <li>A variable name must start with a letter or the underscore character</li> <li>A variable name cannot start with a number</li> <li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li> <li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li> <li>A variable name cannot be any of the Python keywords.</li> </ul> <p>and although this one is not a rule....</p> <ul> <li>It is important to use meaningful or sensible variable names. </li> </ul>"},{"location":"01-SDD/1.3-Variables-and-Data-Types/#types-of-variables","title":"Types of Variables","text":"<p>In programming variables have a particular type and for National 5 there are five data types that you need to know:</p> Data Type Description Integer Whole number: 12, -50, 100 Real number With a decimal point: 22.5, 0.001 String Words and symbols: hello, abc123 Character A single letter, digit or symbol: a, Z, $, # Boolean True (1) or False (0) <p>Warning</p> <p>Once a variable has been set up with a particular type, you can only assign it data of that type.</p> <p>Example</p> <pre><code># This is an integer\nmyage = int(15)\n\n# This is a real number\nprice = float(0.99)\n\n# This is a string\nfaveSubject = str(\"Computing\")\n\n# This is a character\nfirstInitial = char(\"F\")\n\n# This is a Boolean\nisStudent = bool(1)\n</code></pre>"},{"location":"01-SDD/1.3-Variables-and-Data-Types/#calculations","title":"Calculations","text":"<p>Python programs will often carry out calculations with operators. The result is usually stored in a variable:</p> <p>Example</p> <pre><code>num1 = 5\nnum2 = 7\nsum = num1 + num2\n</code></pre> <p>You can use the following operators:</p> <p>Example</p> <pre><code># Three variables\nnum1 = 5\nnum2 = 7\nsum = 0.0\n\n# Addition\nsum = num1 + num2\n\n# Subtraction\nsum = num1 - num2\n\n# Division\nsum = num1 / num2\n\n# Multiplication\nsum = num1 * num2\n\n# Raise to a power\nsum = num1 ** num2\n\n#Note that \u201craising to the power\u201d means, for example, num1**num2. \n\n#To square or cube a number, you would say:\nsquare = num1 ** 2\ncube = num1 ** 3\n</code></pre>"},{"location":"01-SDD/1.3-Variables-and-Data-Types/#string-concatenation","title":"String Concatenation","text":"<p>String concatenation is the term used when joining two strings.</p> <p>Example</p> <pre><code>word1 = \u201cHello\u201d\nword2 = \u201cWorld\u201d\n\nsentence = word1 + word2\n</code></pre> <p>Tip</p> <p>The example above doesn\u2019t include a space, you would have to add a space to the end of \u201cHello\u201d or the beginning of \u201cWorld\u201d.\u2003</p>"},{"location":"01-SDD/1.4-Simple-Conditional-Statements/","title":"Simple Conditional Statements","text":""},{"location":"01-SDD/1.4-Simple-Conditional-Statements/#selection-if-explanation","title":"Selection - If - Explanation","text":"<p>Programs have to make decisions.</p> <p>You have seen how these decisions can be represented on a flowchart (notice the diamond shapes with yes/no decisions).</p> <p>In National 5, you will often be asked to follow a design that has these decisions. You will implement the decisions in Python with if statements.</p>"},{"location":"01-SDD/1.4-Simple-Conditional-Statements/#if-statements","title":"If statements","text":"<p>Your programs will often react to something input by the user:</p> <p>The user is asked to enter a password. If they enter \u201chello123\u201d, access is granted.</p> <pre><code>    # Ask the user to enter a password\n    passwd = input(\"Please enter the password\")\n\n    # Is access granted?\n    if passwd == \u201chello123\u201d:\n        print(\"Access granted\")\n</code></pre> <p>The if statement always starts with the word if, followed by a condition. A condition checks that something is equal to, greater than or less than something else. In this case, it checks if passwd (what the user entered) is equal to the string \u201chello123\u201d.</p> <p>We use indentation for any code that we want to be inside the if statement (this means we tab it in). Notice that the print statement is tabbed in slightly from the left. This means that it only happens if the if statement above it is true. We could have multiple lines of code inside the if statement. The if statement always ends in a colon :</p> <p>** Note the use of the double-equals ==. We use two equals signs when checking for equality in an if statement. We can use the == signs for testing if any variable matches any other data. When our data is a number (whether it is an integer or a real number), we can see if it is less than or greater than another number **</p> Symbols Description <code>==</code> Equal to, e.g. 5 == 5, score == 12 or faveSubject == \"Computing\" <code>&lt;</code> Less than, e.g. 40 and 62 are both &lt; 99 <code>&gt;</code> Greater than, e.g. 50.4 and 85.1 are both &gt; 10.8 <code>&lt;=</code> Less than or equal to, e.g. 22 and 70 are both &lt;= 70 <code>&gt;=</code> Greater than or equal to, e.g. 100 and 105 are both &gt;= 100"},{"location":"01-SDD/1.4-Simple-Conditional-Statements/#multiple-selection-else-explanation","title":"Multiple Selection - Else - Explanation","text":"<p>Sometimes, we want the program to do something if data meets a condition, or otherwise, it is to do something else. This is called an else statement.</p> <p>A program could check that someone\u2019s age is greater than or equal to 17. If so, they are allowed to drive. </p> <p>If this is not so, they are not allowed to drive:</p> <p>Example</p> <pre><code>    # Ask the user for their age\n    age = int(input(\"Please enter your age\"))\n\n    # Old enough to drive?\n    if age &gt;= 17:\n        print(\"Broom broom\")\n    else:\n        print(\"Sorry, no drive yet\u201d)\n</code></pre> <p>In these examples, the program always does one thing, or the other. They are mutually exclusive. You cannot be both age &gt;= 17 and not &gt;= 17 at the same time, so only one branch of the decision is carried out.</p> <p>Note that, as before, the if and else statements end in a colon :</p> <p>The code that follows the if statement is indented (tabbed in). This means that it is only triggered if the if condition is true. The code after the else statement is indented. This means that the second print statement is only triggered if the condition is not true.</p>"},{"location":"01-SDD/1.4-Simple-Conditional-Statements/#multiple-selection-elif-example","title":"Multiple Selection - Elif - Example","text":"<p>Sometimes, information comes in multiple categories.</p> <p>We could ask for a test mark percentage. If the mark is greater than (or equal to) 70, the student gets an A. Otherwise, if their mark is greater than or equal to 60, they get a B. Otherwise (again), if their mark is greater than or equal to 50, they should get a C, and otherwise (finally) they receive no award.</p> <p>This could be represented on a flowchart:</p> <p>This is very efficient, because the program only needs to check for a B or C if the person did not get an A. If they did get enough marks for an A, the program never has to check those conditions.</p> <p>In Python, we create this with elif (short for else-if):</p> <p>Example</p> <pre><code>    # Ask for percentage mark\n    mark = int(input(\"Please enter percentage mark\"))\n\n    # Check which category mark goes in\n    if mark &gt;= 70:\n        grade = \u201cA\u201d\n    elif mark &gt;= 60:\n        grade = \u201cB\u201d\n    elif mark &gt;= 50:\n        grade = \u201cC\u201d\n    else:\n        grade = \u201cF\u201d\n\n    # Print the grade\n    print(grade)\n</code></pre> <p>Elif is followed by a new condition (e.g. \u201celse if mark is greater than or equal to 50\u2026\u201d)</p> <p>If the mark is not greater than or equal to 50, the only other option is the \u201celse\u201d branch, which sets grade to F.</p>"},{"location":"01-SDD/1.5-Fixed-Loops-%28for%29/","title":"Fixed Loops (for)","text":""},{"location":"01-SDD/1.5-Fixed-Loops-%28for%29/#explanation","title":"Explanation","text":"<p>So far, when ever we have wanted to output a word multiple times, we have always wrote a new print statement for each line.</p> <p>Example</p> <pre><code>    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n</code></pre> <p>This is very inefficient.</p> <p>Suppose we wanted to change the message - we\u2019d have to go back and change every line individually, taking up time. </p> <p>To fix this we could instead, use a fixed loop.</p> <p>A fixed loop is a loop that repeats a certain (fixed) number of times. </p> <p>This example is exactly the same as the code above, but with much less code.</p> <p>Example</p> <pre><code>    for loop in range(1, 10):\n        print(\u201cHello world\u201d)\n</code></pre> <p>The word loop is a variable that we could use within our code. It is called the loop counter, because it counts how many times the loop has run so far. </p> <p>We could use any other variable name, say bananas:</p> <p>Example</p> <pre><code>    for bananas in range(0, 8):\n        print(bananas)\n</code></pre> <p>This (more complicated) example is a bitmore complicated as it asks the user to enter any number,ten times (0-9). </p> <p>Each time the loop repeats, it asks for another number, and adds it to its running total:</p> <p>Example</p> <pre><code>    # Example with a running total\n    total = 0\n\n    for loop in range(0, 10):\n        number = int(input(\"Please enter a number\"))\n        total = total + number\n\n    # Show total once the loop is done\n    print(total)\n</code></pre>"},{"location":"01-SDD/1.6-Conditional-Loops-%28while%29/","title":"Conditional Loops (while)","text":""},{"location":"01-SDD/1.6-Conditional-Loops-%28while%29/#explanation","title":"Explanation","text":"<p>A conditional loop (in Python, a while loop) repeats only while a condition is true. </p> <p>A conditional loop is like a combination of a fixed loop and an if statement and you can use all of the same conditions in a while loop that you would in an if statement.</p> <ul> <li> <p>In this example, the user is asked to enter a number. </p> </li> <li> <p>If the number is more than 100, part of the program repeats, asking them to enter the number again. </p> </li> <li> <p>It only repeats while their input is more than 100. Once that condition is met, the loop stops repeating and the program continues:</p> </li> </ul> <p>Example</p> <pre><code>    # Initialise the variable\n    mynumber = 0\n\n    # Ask the user to enter a number\n    mynumber = int(input(\"Please enter a number\"))\n\n    # Example of a while loop\n    while mynumber &gt; 100:\n        print(\"That number is too big!\")\n        mynumber = int(input(\"Please enter a number\"))\n</code></pre> <p>Warning - Don\u2019t get stuck in an infinite loop!</p> <p>Make sure that your condition will always end.</p> <p>For example, this loop would never end as 100 is always more than 5, so the loop will continue running indefinitely.</p> <pre><code>    while 100 &gt; 5:\n        print(\"One hundred is still more than five\")\n</code></pre>"},{"location":"01-SDD/1.6-Conditional-Loops-%28while%29/#extension-tasks","title":"Extension Tasks","text":"01 - Fifty or Less <p>Analysis</p> <p>Create a program that will ask a user to enter a number. This number will be added to a total and as long as the total is below 50 it will ask the user to input another number.</p> Inputs Process Output Integer Add integer to total Total If total below 50 Enter another number <p>Pseudocode</p> <code>Main Steps</code> <p>1.0 Set total TO 0 </p> <p>2.0 Start conditional loop</p> <p><code>Refinements</code></p> <code>2.0</code> <p>2.1 While number != 50</p> <p>2.2 Ask user to enter a number</p> <p>2.3 Add number to total</p> <p>2.4 Display total</p>"},{"location":"01-SDD/1.7-Testing/","title":"Explanation","text":"<p>Testing is something we as programmers do all the time. </p> <p>When you change a program, you run it to check if it works the way you expected. </p> <p>For National 5, we put it into a more formal process.</p>"},{"location":"01-SDD/1.7-Testing/#expected-outcome","title":"Expected Outcome","text":"<p>What you Need to Know</p> <p>You must be able to Describe, identify, exemplify, and implement normal, extreme, and exceptional test data for a specific problem, using a test table.</p> <p>You must be able to describe and identify syntax, execution, and logic errors.</p>"},{"location":"01-SDD/1.8-Normal-Extreme-and-Exceptional-Test-Data/","title":"Normal, Extreme and Exceptional Test Data","text":"<p>When we test a program, we use test data. You enter the test data as the inputs to the program. The data should try to capture a range of different scenarios - don\u2019t just test the program with one piece of data.</p> <p>As an example:</p> <p>You are asked to write a program that picks a random number. The user has to guess what number the program has picked. They are asked to enter a number between 0 and 10. If they enter a number outside that range, the program should show an error message.</p> <p>There are three types of data you need to be able to use and give examples of: normal, extreme and exceptional. In this example, the program expects a number between 0 and 10 (inclusive).</p> <p>Image to be added</p> <p>We write this data into a test table. </p> <p>The test table shows the data we test the program with. </p> <p>We put one example in each row of the table (i.e. don\u2019t say \u201canything between 1 and 9\u201d - pick one!)</p> <p>Image to be added</p> <p>In the test table, you should say what you expect the program to do. Some test tables have another column for what actually happened, and you would record this afterwards.</p> <p>Take another example - rolling a dice. </p> <p>You are asked for four pieces of test data: one normal, two extreme and one exceptional. </p> <p>Remember that normal data is definitely within range, extreme is on the edge, but accepted, and exceptional is definitely incorrect. </p> <p>Which values would be valid for a standard 6-sided dice?</p> <p>Image to be added</p>"},{"location":"01-SDD/1.9-Readability/","title":"Readability","text":"<p>Readability is about making your program easy for you, or other programmers after you, to read and understand. </p> <p>There are four ways that you can make your code readable, and you are expected to do these in your work. </p> <p>The coursework assignment includes marks for readable code using these four methods.</p>"},{"location":"01-SDD/1.9-Readability/#internal-commentary","title":"Internal Commentary","text":"<p>Your code should contain internal commentary. </p> <p>Comments are notes that you leave to yourself, or other programmers, to explain what\u2019s going on. </p> <p>The computer ignores them when translating the program.</p> <p>I always use internal commentary in the examples I give you, and you\u2019re expected to do the same. </p> <p>Example of Internal Commentary in Python</p> <pre><code># This is an internal comment\n# The computer ignores these lines\n</code></pre>"},{"location":"01-SDD/1.9-Readability/#meaningful-identifiers","title":"Meaningful identifiers","text":"<p>Sometimes also called meaningful variable names. </p> <p>When you look at your program, do the variable names help you to understand it? If so, you\u2019ve probably used meaningful names.</p> <p>In short, don\u2019t call your variables things like x or k. </p> <p>Give them more suitable names like age, password, multiplier - whatever! Although the computer ignores the names of variables, you gain marks for using names that make the program easier for humans to understand.</p> <p>Example</p> Not MeaningfulMeaningful <pre><code>p = input(\u201cWhat is your age?\u201d)\n= input(\u201cWhat is your name?\u201d)\n\nprint(\u201cHello\u201d, x)\nprint(\u201cYou are\u201d, p, \u201cyears old.\u201d)\n</code></pre> <pre><code>age = input(\u201cWhat is your age?\u201d)\nname = input(\u201cWhat is your name?\u201d)\n\nprint(\u201cHello\u201d, name)\nprint(\u201cYou are\u201d, age, \u201cyears old.\u201d)\n</code></pre> <p>The program on the left is shorter, but the programmer is more likely to make a mistake and mix up x and p.</p> <p>This becomes even worse in longer programs. Save yourself the trouble by using meaningful variable names.</p>"},{"location":"01-SDD/1.9-Readability/#indentation","title":"Indentation","text":"<p>Indentation means that code is \u201ctabbed in\u201d from the side, so that it\u2019s clear what loops or if statements it belongs to. </p> <p>This is especially true in Python, because in fact, code has to be indented to work properly.</p> <p>Example</p> Not IndentedIndented <pre><code>if age &gt;= 17:\nprint(\u201cYou can learn to drive\u201d)\nelse:\nprint(\u201cYou can\u2019t learn yet...\")\n</code></pre> <pre><code>if age &gt;= 17:\n    print(\u201cYou can learn to drive\u201d)\nelse:\n    print(\u201cYou can\u2019t learn yet...\")\n</code></pre> <p>In the program on the right, it\u2019s easier to see that the two print lines belong to the if and else.</p> <p>You already do this in Python, just remember to talk about it in your evaluation!</p>"},{"location":"01-SDD/1.9-Readability/#whitespace","title":"Whitespace","text":"<p>Whitespace is about leaving blank lines between pieces of code. This spaces things out and makes it a little easier to see what belongs together. </p> <p>I always leave whitespace in the practical examples I give you - blank lines so that related pieces of code are grouped together. </p> <p>I\u2019ve done it with paragraphs in these lesson notes!</p> <p>Real programs often run into thousands of lines of code. </p> <p>Think how hard those would be to read if the lines were all jammed together with no blank spaces.</p>"}]}